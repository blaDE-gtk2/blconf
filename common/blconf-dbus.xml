<?xml version="1.0" encoding="UTF-8"?>

<node name="/org/blade/Blconf">
    <interface name="org.blade.Blconf">
        <annotation name="org.freedesktop.DBus.GLib.CSymbol"
                    value="blconf"/>
        <annotation name="org.freedesktop.DBus.GLib.ClientCSymbol"
                    value="blconf_client"/>
    
        <!--
             void org.blade.Blconf.SetProperty(String channel,
                                              String property,
                                              Variant value)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             @value: A value to set for @property.  Valid variant
                     types supported so far: [FIXME]
             
             Sets a property value.
        -->
        <method name="SetProperty">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="in" name="value" type="v"/>
        </method>
        
        <!--
             Variant org.blade.Blconf.GetProperty(String channel,
                                                 String property)
             
             @channel: A channel/application/namespace name.
             @propert: A property name.
             
             Gets a property value, returned as a variant type.
        -->
        <method name="GetProperty">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="out" name="value" type="v"/>
        </method>
        
        <!--
             Array{String,Variant} org.blade.Blconf.GetAllProperties(String channel,
                                                                    String property_base)
             
             @channel: A channel/application/namespace name.
             @property_base: The root of poperties to return.
             
             Gets all the properties and values that exist in
             @channel that are rooted at @property_base.  Passing
             "/" or the empty string as @property_base will return
             all properties in the channel.
             
             Returns: An array of properties and values; the
                      properties are strings, and the values are 
                      variants.
        -->
        <method name="GetAllProperties">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property_base" type="s"/>
            <arg direction="out" name="properties" type="a{sv}"/>
        </method>
        
        <!--
             Boolean org.blade.Blconf.PropertyExists(String channel,
                                                    String property)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             
             Checks to see if @property exists in @channel.
             
             Returns: %TRUE if @property exists, %FALSE if not.
        -->
        <method name="PropertyExists">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="out" name="exists" type="b"/>
        </method>
        
        <!--
             void org.blade.Blconf.ResetProperty(String channel,
                                                String property,
                                                Boolean recursive)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             @recursive: Whether the operation resets sub-properties.
             
             Resets @property on @channel.  If @recursive is true,
             all sub-properties of the specified property will be
             reset as well.  If the special "/" property is specified
             for @property, and @recursive is true, the entire channel
             will be reset.

             Since properties can be set by root-owned system-wide
             settings, actual property *removal* may not be possible.
             The idea of "reset" is that it puts the configuration store
             back to the application's original state as if it were
             freshly installed for the current user.  If there are no
             system-wide settings, this amounts to a "remove."  If there
             are system-wide settings and/or some properties are locked
             by system policy, then it's just a reset.
        -->
        <method name="ResetProperty">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="in" name="recursive" type="b"/>
        </method>

        <!--
             Array{String} org.blade.Blconf.ListChannels()

             Returns a list of all known channels as an array of
             strings.
        -->
        <method name="ListChannels">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="out" name="channels" type="as"/>
        </method>
        
        <!--
             Boolean org.blade.Blconf.IsPropertyLocked(String channel,
                                                      String property)

             @channel: A channel/application/namespace name.
             @property: A property name.

             Queries whether the property can be modified by the
             current user.  The property may be locked by system
             policy.  Example use would be for a "kiosk mode"
             where users cannot change how the desktop
             environment is set up.
        -->
        <method name="IsPropertyLocked">
            <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
            <arg direction="in" name="channel" type="s"/>
            <arg direction="in" name="property" type="s"/>
            <arg direction="out" name="locked" type="b"/>
        </method>

        <!--
             void org.blade.Blconf.PropertyChanged(String channel,
                                                  String property.
                                                  Variant value)
             
             @channel: A channel/application/namespace name.
             @property: A property name.
             @value: The new value.
             
             Emitted when a property changes.
        -->
        <signal name="PropertyChanged">
            <arg name="channel" type="s"/>
            <arg name="property" type="s"/>
            <arg name="value" type="v"/>
        </signal>

        <!--
             void org.blade.Blconf.PropertyRemoved(String channel,
                                                  String property)

             @channel: A channel/application/namespace name.
             @property: A property name.

             Emitted when a property is removed.
        -->
        <signal name="PropertyRemoved">
            <arg name="channel" type="s"/>
            <arg name="property" type="s"/>
        </signal>
    </interface>
</node>
